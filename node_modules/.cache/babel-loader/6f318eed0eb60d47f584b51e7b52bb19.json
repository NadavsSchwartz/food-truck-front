{"ast":null,"code":"'use strict';\n\nvar R = require('ramda'); // (Promise, Callback, Options?) => Promise | void\n//\n// Options: { no_spread: bool }\n//   no_spread: prevents wrapPromise from applying array-like return arguments\n//              to the callback.\n\n\nvar wrapPromise = function (promise, cb, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (cb) {\n    return promise.then(function (args) {\n      if (R.isArrayLike(args) && !options.no_spread) {\n        // call outside of promise stack\n        setImmediate(function () {\n          R.apply(R.partial(cb, [null]), args);\n        });\n      } else {\n        setImmediate(function () {\n          cb(null, args);\n        });\n      }\n    }).catch(function (err) {\n      setImmediate(function () {\n        cb(err);\n      });\n    });\n  }\n\n  return promise;\n};\n\nmodule.exports = wrapPromise;","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/plaid/lib/wrapPromise.js"],"names":["R","require","wrapPromise","promise","cb","options","then","args","isArrayLike","no_spread","setImmediate","apply","partial","catch","err","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,OAAD,CAAf,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,WAAW,GAAG,UAASC,OAAT,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AAC/C,MAAI,CAACA,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAID,EAAJ,EAAQ;AACN,WAAOD,OAAO,CAACG,IAAR,CAAa,UAASC,IAAT,EAAe;AACjC,UAAIP,CAAC,CAACQ,WAAF,CAAcD,IAAd,KAAuB,CAACF,OAAO,CAACI,SAApC,EAA+C;AAC7C;AACAC,QAAAA,YAAY,CAAC,YAAW;AACtBV,UAAAA,CAAC,CAACW,KAAF,CAAQX,CAAC,CAACY,OAAF,CAAUR,EAAV,EAAc,CAAC,IAAD,CAAd,CAAR,EAA+BG,IAA/B;AACD,SAFW,CAAZ;AAGD,OALD,MAKO;AACLG,QAAAA,YAAY,CAAC,YAAW;AACtBN,UAAAA,EAAE,CAAC,IAAD,EAAOG,IAAP,CAAF;AACD,SAFW,CAAZ;AAGD;AACF,KAXM,EAWJM,KAXI,CAWE,UAASC,GAAT,EAAc;AACrBJ,MAAAA,YAAY,CAAC,YAAW;AACtBN,QAAAA,EAAE,CAACU,GAAD,CAAF;AACD,OAFW,CAAZ;AAGD,KAfM,CAAP;AAgBD;;AACD,SAAOX,OAAP;AACD,CAxBD;;AA0BAY,MAAM,CAACC,OAAP,GAAiBd,WAAjB","sourcesContent":["'use strict';\n\nvar R = require('ramda');\n\n// (Promise, Callback, Options?) => Promise | void\n//\n// Options: { no_spread: bool }\n//   no_spread: prevents wrapPromise from applying array-like return arguments\n//              to the callback.\nvar wrapPromise = function(promise, cb, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (cb) {\n    return promise.then(function(args) {\n      if (R.isArrayLike(args) && !options.no_spread) {\n        // call outside of promise stack\n        setImmediate(function() {\n          R.apply(R.partial(cb, [null]), args);\n        });\n      } else {\n        setImmediate(function() {\n          cb(null, args);\n        });\n      }\n    }).catch(function(err) {\n      setImmediate(function() {\n        cb(err);\n      });\n    });\n  }\n  return promise;\n};\n\nmodule.exports = wrapPromise;\n"]},"metadata":{},"sourceType":"script"}