{"ast":null,"code":"var _containsWith = require('./internal/_containsWith');\n\nvar _curry3 = require('./internal/_curry3');\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\n\n\nmodule.exports = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/differenceWith.js"],"names":["_containsWith","require","_curry3","module","exports","differenceWith","pred","first","second","out","idx","firstLen","length","push"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,0BAAD,CAA3B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAAC,SAASG,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6C;AACpE,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAArB;;AACA,SAAOF,GAAG,GAAGC,QAAb,EAAuB;AACrB,QAAI,CAACX,aAAa,CAACM,IAAD,EAAOC,KAAK,CAACG,GAAD,CAAZ,EAAmBF,MAAnB,CAAd,IACA,CAACR,aAAa,CAACM,IAAD,EAAOC,KAAK,CAACG,GAAD,CAAZ,EAAmBD,GAAnB,CADlB,EAC2C;AACzCA,MAAAA,GAAG,CAACI,IAAJ,CAASN,KAAK,CAACG,GAAD,CAAd;AACD;;AACDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,GAAP;AACD,CAZuB,CAAxB","sourcesContent":["var _containsWith = require('./internal/_containsWith');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nmodule.exports = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) &&\n        !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\n"]},"metadata":{},"sourceType":"script"}