{"ast":null,"code":"var _curry1 = require('./internal/_curry1');\n\nvar _has = require('./internal/_has');\n\nvar keys = require('./keys');\n/**\n * Same as R.invertObj, however this accounts for objects with duplicate values\n * by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys\n * in an array.\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\n\n\nmodule.exports = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : out[val] = [];\n    list[list.length] = key;\n    idx += 1;\n  }\n\n  return out;\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/invert.js"],"names":["_curry1","require","_has","keys","module","exports","invert","obj","props","len","length","idx","out","key","val","list"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiBL,OAAO,CAAC,SAASM,MAAT,CAAgBC,GAAhB,EAAqB;AAC5C,MAAIC,KAAK,GAAGL,IAAI,CAACI,GAAD,CAAhB;AACA,MAAIE,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,SAAOD,GAAG,GAAGF,GAAb,EAAkB;AAChB,QAAII,GAAG,GAAGL,KAAK,CAACG,GAAD,CAAf;AACA,QAAIG,GAAG,GAAGP,GAAG,CAACM,GAAD,CAAb;AACA,QAAIE,IAAI,GAAGb,IAAI,CAACY,GAAD,EAAMF,GAAN,CAAJ,GAAiBA,GAAG,CAACE,GAAD,CAApB,GAA6BF,GAAG,CAACE,GAAD,CAAH,GAAW,EAAnD;AACAC,IAAAA,IAAI,CAACA,IAAI,CAACL,MAAN,CAAJ,GAAoBG,GAApB;AACAF,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOC,GAAP;AACD,CAduB,CAAxB","sourcesContent":["var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar keys = require('./keys');\n\n\n/**\n * Same as R.invertObj, however this accounts for objects with duplicate values\n * by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys\n * in an array.\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nmodule.exports = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\n"]},"metadata":{},"sourceType":"script"}