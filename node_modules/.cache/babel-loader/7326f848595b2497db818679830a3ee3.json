{"ast":null,"code":"var _contains = require('./_contains'); // A simple Set type that honours R.equals semantics\n\n\nmodule.exports = function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  } // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n\n\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  function hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n\n    switch (type) {\n      case 'string':\n      case 'number':\n        // distinguish between +0 and -0\n        if (item === 0 && 1 / item === -Infinity) {\n          if (set._items['-0']) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items['-0'] = true;\n            }\n\n            return false;\n          }\n        } // these types can all utilise the native Set\n\n\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n\n            set._nativeSet.add(item);\n\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = {};\n              set._items[type][item] = true;\n            }\n\n            return false;\n          } else if (item in set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][item] = true;\n            }\n\n            return false;\n          }\n        }\n\n      case 'boolean':\n        // set._items['boolean'] holds a two element array\n        // representing [ falseExists, trueExists ]\n        if (type in set._items) {\n          var bIdx = item ? 1 : 0;\n\n          if (set._items[type][bIdx]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][bIdx] = true;\n            }\n\n            return false;\n          }\n        } else {\n          if (shouldAdd) {\n            set._items[type] = item ? [false, true] : [true, false];\n          }\n\n          return false;\n        }\n\n      case 'function':\n        // compare functions for reference equality\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n\n            set._nativeSet.add(item);\n\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n\n            return false;\n          }\n\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n\n            return false;\n          }\n\n          return true;\n        }\n\n      case 'undefined':\n        if (set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type] = true;\n          }\n\n          return false;\n        }\n\n      case 'object':\n        if (item === null) {\n          if (!set._items['null']) {\n            if (shouldAdd) {\n              set._items['null'] = true;\n            }\n\n            return false;\n          }\n\n          return true;\n        }\n\n      /* falls through */\n\n      default:\n        // reduce the search size of heterogeneous sets by creating buckets\n        // for each type.\n        type = Object.prototype.toString.call(item);\n\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        } // scan through all previously applied items\n\n\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n    }\n  }\n\n  return _Set;\n}();","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/internal/_Set.js"],"names":["_contains","require","module","exports","_Set","_nativeSet","Set","_items","prototype","add","item","hasOrAdd","has","shouldAdd","set","type","prevSize","newSize","Infinity","size","bIdx","push","Object","toString","call"],"mappings":"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","sourcesContent":["var _contains = require('./_contains');\n\n\n// A simple Set type that honours R.equals semantics\nmodule.exports = (function() {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function(item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function(item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  function hasOrAdd(item, shouldAdd, set) {\n    var type = typeof item;\n    var prevSize, newSize;\n    switch (type) {\n      case 'string':\n      case 'number':\n        // distinguish between +0 and -0\n        if (item === 0 && 1 / item === -Infinity) {\n          if (set._items['-0']) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items['-0'] = true;\n            }\n            return false;\n          }\n        }\n        // these types can all utilise the native Set\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = {};\n              set._items[type][item] = true;\n            }\n            return false;\n          } else if (item in set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][item] = true;\n            }\n            return false;\n          }\n        }\n\n      case 'boolean':\n        // set._items['boolean'] holds a two element array\n        // representing [ falseExists, trueExists ]\n        if (type in set._items) {\n          var bIdx = item ? 1 : 0;\n          if (set._items[type][bIdx]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type][bIdx] = true;\n            }\n            return false;\n          }\n        } else {\n          if (shouldAdd) {\n            set._items[type] = item ? [false, true] : [true, false];\n          }\n          return false;\n        }\n\n      case 'function':\n        // compare functions for reference equality\n        if (set._nativeSet !== null) {\n          if (shouldAdd) {\n            prevSize = set._nativeSet.size;\n            set._nativeSet.add(item);\n            newSize = set._nativeSet.size;\n            return newSize === prevSize;\n          } else {\n            return set._nativeSet.has(item);\n          }\n        } else {\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n            return false;\n          }\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n            return false;\n          }\n          return true;\n        }\n\n      case 'undefined':\n        if (set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type] = true;\n          }\n          return false;\n        }\n\n      case 'object':\n        if (item === null) {\n          if (!set._items['null']) {\n            if (shouldAdd) {\n              set._items['null'] = true;\n            }\n            return false;\n          }\n          return true;\n        }\n      /* falls through */\n      default:\n        // reduce the search size of heterogeneous sets by creating buckets\n        // for each type.\n        type = Object.prototype.toString.call(item);\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        // scan through all previously applied items\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n    }\n  }\n  return _Set;\n}());\n"]},"metadata":{},"sourceType":"script"}