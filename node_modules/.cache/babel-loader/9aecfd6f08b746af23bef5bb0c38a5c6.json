{"ast":null,"code":"'use strict';\n\nvar R = require('ramda');\n\nvar axios = require('axios');\n\nvar pjson = require('../package.json');\n\nvar PlaidError = require('./PlaidError');\n\nvar wrapPromise = require('./wrapPromise'); // Max timeout of ten minutes\n\n\nvar DEFAULT_TIMEOUT_IN_MILLIS = 10 * 60 * 1000;\n\nvar rejectWithPlaidError = function (reject, res) {\n  // plaid error\n  if (R.type(res.data) === 'Object') {\n    res.data.status_code = res.status;\n    return reject(new PlaidError(res.data));\n  } // Unknown body type returned, return a standard API_ERROR\n\n\n  return reject(new PlaidError({\n    error_type: 'API_ERROR',\n    status_code: res.status,\n    error_code: 'INTERNAL_SERVER_ERROR',\n    error_message: String(res.data),\n    display_message: null,\n    request_id: null\n  }));\n};\n\nvar handleApiResponse = function (resolve, reject, res, isMfa) {\n  var $body = res.data;\n\n  if (res != null && R.type($body) === 'Object') {\n    $body.status_code = res.status;\n  } // success response (MFA)\n\n\n  if (isMfa && res.status === 200) {\n    return resolve([null, $body]); // mfa response (MFA)\n  } else if (isMfa && res.status === 210) {\n    return resolve([$body, null]); // success response (non mfa)\n  } else if (res.status === 200) {\n    // extract request id from header for binary data,\n    // i.e. mime type application/*\n    if (res.headers['plaid-request-id'] != null && res.headers['content-type'] != null && res.headers['content-type'].indexOf('application') === 0) {\n      return resolve({\n        request_id: res.headers['plaid-request-id'],\n        buffer: $body\n      });\n    }\n\n    return resolve($body);\n  } else {\n    return rejectWithPlaidError(reject, res);\n  }\n};\n\nvar plaidRequest = function (context, requestSpec, clientRequestOptions, cb) {\n  var uri = context.env + requestSpec.path;\n  var method = 'POST';\n  var requestJSON = R.merge(R.dissoc('env', context), requestSpec.body);\n  var headers = {\n    'User-Agent': 'Plaid Node v' + pjson.version\n  };\n\n  if (clientRequestOptions.version != null) {\n    headers['Plaid-Version'] = clientRequestOptions.version;\n  }\n\n  if (clientRequestOptions.clientApp != null) {\n    headers['Plaid-Client-App'] = clientRequestOptions.clientApp;\n  } // merge the default request options with the client specified options,\n  // this allows for clients to supply extra options to the request function\n\n\n  var requestOptions = R.merge({\n    url: uri,\n    method: method,\n    data: requestJSON,\n    headers: headers,\n    timeout: DEFAULT_TIMEOUT_IN_MILLIS,\n    responseType: requestSpec.binary ? 'arraybuffer' : 'json'\n  }, clientRequestOptions);\n  return wrapPromise(new Promise(function (resolve, reject) {\n    axios(requestOptions).then(res => {\n      handleApiResponse(resolve, reject, res, requestSpec.includeMfaResponse);\n    }).catch(error => {\n      if (error.response) {\n        return rejectWithPlaidError(reject, error.response);\n      } else {\n        return reject(error);\n      }\n    });\n  }), cb);\n};\n\nmodule.exports = plaidRequest;","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/plaid/lib/plaidRequest.js"],"names":["R","require","axios","pjson","PlaidError","wrapPromise","DEFAULT_TIMEOUT_IN_MILLIS","rejectWithPlaidError","reject","res","type","data","status_code","status","error_type","error_code","error_message","String","display_message","request_id","handleApiResponse","resolve","isMfa","$body","headers","indexOf","buffer","plaidRequest","context","requestSpec","clientRequestOptions","cb","uri","env","path","method","requestJSON","merge","dissoc","body","version","clientApp","requestOptions","url","timeout","responseType","binary","Promise","then","includeMfaResponse","catch","error","response","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar R = require('ramda');\nvar axios = require('axios');\nvar pjson = require('../package.json');\n\nvar PlaidError = require('./PlaidError');\nvar wrapPromise = require('./wrapPromise');\n\n\n// Max timeout of ten minutes\nvar DEFAULT_TIMEOUT_IN_MILLIS = 10 * 60 * 1000;\n\nvar rejectWithPlaidError = function(reject, res) {\n  // plaid error\n  if (R.type(res.data) === 'Object') {\n    res.data.status_code = res.status;\n    return reject(new PlaidError(res.data));\n  }\n\n  // Unknown body type returned, return a standard API_ERROR\n  return reject(new PlaidError({\n    error_type: 'API_ERROR',\n    status_code: res.status,\n    error_code: 'INTERNAL_SERVER_ERROR',\n    error_message: String(res.data),\n    display_message: null,\n    request_id: null,\n  }));\n};\n\nvar handleApiResponse = function(resolve, reject, res, isMfa) {\n  var $body = res.data;\n\n  if (res != null && R.type($body) === 'Object') {\n    $body.status_code = res.status;\n  }\n\n  // success response (MFA)\n  if (isMfa && res.status === 200) {\n    return resolve([null, $body]);\n\n  // mfa response (MFA)\n  } else if (isMfa && res.status === 210) {\n    return resolve([$body, null]);\n\n  // success response (non mfa)\n  } else if (res.status === 200) {\n    // extract request id from header for binary data,\n    // i.e. mime type application/*\n    if (res.headers['plaid-request-id'] != null &&\n        res.headers['content-type'] != null &&\n        res.headers['content-type'].indexOf('application') === 0) {\n      return resolve({\n        request_id: res.headers['plaid-request-id'],\n        buffer: $body\n      });\n    }\n    return resolve($body);\n\n  } else {\n    return rejectWithPlaidError(reject, res);\n  }\n};\n\nvar plaidRequest = function(context, requestSpec, clientRequestOptions, cb) {\n  var uri = context.env + requestSpec.path;\n  var method = 'POST';\n  var requestJSON = R.merge(R.dissoc('env', context), requestSpec.body);\n  var headers = {\n    'User-Agent': 'Plaid Node v' + pjson.version\n  };\n\n  if (clientRequestOptions.version != null) {\n    headers['Plaid-Version'] = clientRequestOptions.version;\n  }\n\n  if (clientRequestOptions.clientApp != null) {\n    headers['Plaid-Client-App'] = clientRequestOptions.clientApp;\n  }\n\n  // merge the default request options with the client specified options,\n  // this allows for clients to supply extra options to the request function\n  var requestOptions = R.merge({\n    url: uri,\n    method: method,\n    data: requestJSON,\n    headers: headers,\n    timeout: DEFAULT_TIMEOUT_IN_MILLIS,\n    responseType: requestSpec.binary ? 'arraybuffer' : 'json'\n  }, clientRequestOptions);\n\n  return wrapPromise(new Promise(function(resolve, reject) {\n    axios(requestOptions)\n      .then((res) => {\n        handleApiResponse(resolve, reject, res,\n          requestSpec.includeMfaResponse);\n      })\n      .catch((error) => {\n        if (error.response) {\n          return rejectWithPlaidError(reject, error.response);\n        } else {\n          return reject(error);\n        }\n      });\n  }), cb);\n};\n\nmodule.exports = plaidRequest;\n"]},"metadata":{},"sourceType":"script"}