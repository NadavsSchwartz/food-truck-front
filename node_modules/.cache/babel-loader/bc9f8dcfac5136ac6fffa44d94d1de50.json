{"ast":null,"code":"var _cloneRegExp = require('./internal/_cloneRegExp');\n\nvar _curry2 = require('./internal/_curry2');\n\nvar _isRegExp = require('./internal/_isRegExp');\n\nvar toString = require('./toString');\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\n\n\nmodule.exports = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n\n  return _cloneRegExp(pattern).test(str);\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/test.js"],"names":["_cloneRegExp","require","_curry2","_isRegExp","toString","module","exports","test","pattern","str","TypeError"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,yBAAD,CAA1B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAAC,SAASK,IAAT,CAAcC,OAAd,EAAuBC,GAAvB,EAA4B;AACnD,MAAI,CAACN,SAAS,CAACK,OAAD,CAAd,EAAyB;AACvB,UAAM,IAAIE,SAAJ,CAAc,4EAA4EN,QAAQ,CAACI,OAAD,CAAlG,CAAN;AACD;;AACD,SAAOR,YAAY,CAACQ,OAAD,CAAZ,CAAsBD,IAAtB,CAA2BE,GAA3B,CAAP;AACD,CALuB,CAAxB","sourcesContent":["var _cloneRegExp = require('./internal/_cloneRegExp');\nvar _curry2 = require('./internal/_curry2');\nvar _isRegExp = require('./internal/_isRegExp');\nvar toString = require('./toString');\n\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nmodule.exports = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\n"]},"metadata":{},"sourceType":"script"}