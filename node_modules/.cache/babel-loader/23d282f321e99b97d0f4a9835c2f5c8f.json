{"ast":null,"code":"var _curry2 = require('./internal/_curry2');\n\nvar _dispatchable = require('./internal/_dispatchable');\n\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\n\nvar last = require('./last');\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\n\n\nmodule.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n\n  if (len !== 0) {\n    result[0] = list[0];\n\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n\n      idx += 1;\n    }\n  }\n\n  return result;\n}));","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/dropRepeatsWith.js"],"names":["_curry2","require","_dispatchable","_xdropRepeatsWith","last","module","exports","dropRepeatsWith","pred","list","result","idx","len","length"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,8BAAD,CAA/B;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBN,OAAO,CAACE,aAAa,CAAC,EAAD,EAAKC,iBAAL,EAAwB,SAASI,eAAT,CAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;AACjG,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGH,IAAI,CAACI,MAAf;;AACA,MAAID,GAAG,KAAK,CAAZ,EAAe;AACbF,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,IAAI,CAAC,CAAD,CAAhB;;AACA,WAAOE,GAAG,GAAGC,GAAb,EAAkB;AAChB,UAAI,CAACJ,IAAI,CAACJ,IAAI,CAACM,MAAD,CAAL,EAAeD,IAAI,CAACE,GAAD,CAAnB,CAAT,EAAoC;AAClCD,QAAAA,MAAM,CAACA,MAAM,CAACG,MAAR,CAAN,GAAwBJ,IAAI,CAACE,GAAD,CAA5B;AACD;;AACDA,MAAAA,GAAG,IAAI,CAAP;AACD;AACF;;AACD,SAAOD,MAAP;AACD,CAdqC,CAAd,CAAxB","sourcesContent":["var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xdropRepeatsWith = require('./internal/_xdropRepeatsWith');\nvar last = require('./last');\n\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a, a -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nmodule.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\n\n"]},"metadata":{},"sourceType":"script"}