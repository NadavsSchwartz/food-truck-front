{"ast":null,"code":"var _cloneRegExp = require('./_cloneRegExp');\n\nvar type = require('../type');\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\n\nmodule.exports = function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    default:\n      return value;\n  }\n};","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/internal/_clone.js"],"names":["_cloneRegExp","require","type","module","exports","_clone","value","refFrom","refTo","deep","copy","copiedValue","len","length","idx","key","Date","valueOf"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC5D,MAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,WAAd,EAA2B;AACpC,QAAIC,GAAG,GAAGL,OAAO,CAACM,MAAlB;AACA,QAAIC,GAAG,GAAG,CAAV;;AACA,WAAOA,GAAG,GAAGF,GAAb,EAAkB;AAChB,UAAIN,KAAK,KAAKC,OAAO,CAACO,GAAD,CAArB,EAA4B;AAC1B,eAAON,KAAK,CAACM,GAAD,CAAZ;AACD;;AACDA,MAAAA,GAAG,IAAI,CAAP;AACD;;AACDP,IAAAA,OAAO,CAACO,GAAG,GAAG,CAAP,CAAP,GAAmBR,KAAnB;AACAE,IAAAA,KAAK,CAACM,GAAG,GAAG,CAAP,CAAL,GAAiBH,WAAjB;;AACA,SAAK,IAAII,GAAT,IAAgBT,KAAhB,EAAuB;AACrBK,MAAAA,WAAW,CAACI,GAAD,CAAX,GAAmBN,IAAI,GACrBJ,MAAM,CAACC,KAAK,CAACS,GAAD,CAAN,EAAaR,OAAb,EAAsBC,KAAtB,EAA6B,IAA7B,CADe,GACsBF,KAAK,CAACS,GAAD,CADlD;AAED;;AACD,WAAOJ,WAAP;AACD,GAhBD;;AAiBA,UAAQT,IAAI,CAACI,KAAD,CAAZ;AACE,SAAK,QAAL;AAAgB,aAAOI,IAAI,CAAC,EAAD,CAAX;;AAChB,SAAK,OAAL;AAAgB,aAAOA,IAAI,CAAC,EAAD,CAAX;;AAChB,SAAK,MAAL;AAAgB,aAAO,IAAIM,IAAJ,CAASV,KAAK,CAACW,OAAN,EAAT,CAAP;;AAChB,SAAK,QAAL;AAAgB,aAAOjB,YAAY,CAACM,KAAD,CAAnB;;AAChB;AAAgB,aAAOA,KAAP;AALlB;AAOD,CAzBD","sourcesContent":["var _cloneRegExp = require('./_cloneRegExp');\nvar type = require('../type');\n\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nmodule.exports = function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ?\n        _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':  return copy({});\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp':  return _cloneRegExp(value);\n    default:        return value;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}