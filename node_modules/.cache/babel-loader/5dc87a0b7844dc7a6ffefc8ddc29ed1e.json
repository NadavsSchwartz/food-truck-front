{"ast":null,"code":"var _curry2 = require('./internal/_curry2');\n\nvar _dispatchable = require('./internal/_dispatchable');\n\nvar _makeFlat = require('./internal/_makeFlat');\n\nvar _xchain = require('./internal/_xchain');\n\nvar map = require('./map');\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\n\n\nmodule.exports = _curry2(_dispatchable(['chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n\n  return _makeFlat(false)(map(fn, monad));\n}));","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/chain.js"],"names":["_curry2","require","_dispatchable","_makeFlat","_xchain","map","module","exports","chain","fn","monad","x"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiBP,OAAO,CAACE,aAAa,CAAC,CAAC,OAAD,CAAD,EAAYE,OAAZ,EAAqB,SAASI,KAAT,CAAeC,EAAf,EAAmBC,KAAnB,EAA0B;AACnF,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAO,UAASC,CAAT,EAAY;AAAE,aAAOF,EAAE,CAACC,KAAK,CAACC,CAAD,CAAN,CAAF,CAAaA,CAAb,CAAP;AAAyB,KAA9C;AACD;;AACD,SAAOR,SAAS,CAAC,KAAD,CAAT,CAAiBE,GAAG,CAACI,EAAD,EAAKC,KAAL,CAApB,CAAP;AACD,CALqC,CAAd,CAAxB","sourcesContent":["var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _makeFlat = require('./internal/_makeFlat');\nvar _xchain = require('./internal/_xchain');\nvar map = require('./map');\n\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nmodule.exports = _curry2(_dispatchable(['chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\n"]},"metadata":{},"sourceType":"script"}