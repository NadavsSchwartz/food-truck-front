{"ast":null,"code":"var _concat = require('./internal/_concat');\n\nvar _curry2 = require('./internal/_curry2');\n\nvar _reduce = require('./internal/_reduce');\n\nvar map = require('./map');\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\n\n\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n    return applicative(x)(fn(x));\n  } : // else\n  _reduce(function (acc, f) {\n    return _concat(acc, map(f, fn));\n  }, [], applicative);\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/ap.js"],"names":["_concat","require","_curry2","_reduce","map","module","exports","ap","applicative","fn","x","acc","f"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAAC,SAASK,EAAT,CAAYC,WAAZ,EAAyBC,EAAzB,EAA6B;AACpD,SACE,OAAOD,WAAW,CAACD,EAAnB,KAA0B,UAA1B,GACEC,WAAW,CAACD,EAAZ,CAAeE,EAAf,CADF,GAEA,OAAOD,WAAP,KAAuB,UAAvB,GACE,UAASE,CAAT,EAAY;AAAE,WAAOF,WAAW,CAACE,CAAD,CAAX,CAAeD,EAAE,CAACC,CAAD,CAAjB,CAAP;AAA+B,GAD/C,GAEA;AACEP,EAAAA,OAAO,CAAC,UAASQ,GAAT,EAAcC,CAAd,EAAiB;AAAE,WAAOZ,OAAO,CAACW,GAAD,EAAMP,GAAG,CAACQ,CAAD,EAAIH,EAAJ,CAAT,CAAd;AAAkC,GAAtD,EAAwD,EAAxD,EAA4DD,WAA5D,CANX;AAQD,CATuB,CAAxB","sourcesContent":["var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar map = require('./map');\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return (\n    typeof applicative.ap === 'function' ?\n      applicative.ap(fn) :\n    typeof applicative === 'function' ?\n      function(x) { return applicative(x)(fn(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)\n  );\n});\n"]},"metadata":{},"sourceType":"script"}