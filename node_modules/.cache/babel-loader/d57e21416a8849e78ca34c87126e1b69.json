{"ast":null,"code":"var _arity = require('./internal/_arity');\n\nvar _curry1 = require('./internal/_curry1');\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\n\n\nmodule.exports = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function () {\n    if (called) {\n      return result;\n    }\n\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/once.js"],"names":["_arity","require","_curry1","module","exports","once","fn","called","result","length","apply","arguments"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAAC,SAASG,IAAT,CAAcC,EAAd,EAAkB;AACzC,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,MAAJ;AACA,SAAOR,MAAM,CAACM,EAAE,CAACG,MAAJ,EAAY,YAAW;AAClC,QAAIF,MAAJ,EAAY;AACV,aAAOC,MAAP;AACD;;AACDD,IAAAA,MAAM,GAAG,IAAT;AACAC,IAAAA,MAAM,GAAGF,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAT;AACA,WAAOH,MAAP;AACD,GAPY,CAAb;AAQD,CAXuB,CAAxB","sourcesContent":["var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\n\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nmodule.exports = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n"]},"metadata":{},"sourceType":"script"}