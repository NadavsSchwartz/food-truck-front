{"ast":null,"code":"var _curry1 = require('./internal/_curry1');\n\nvar mean = require('./mean');\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\n\n\nmodule.exports = _curry1(function median(list) {\n  var len = list.length;\n\n  if (len === 0) {\n    return NaN;\n  }\n\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});","map":{"version":3,"sources":["/Users/nadavschwartz/Desktop/ReactProject/money-target/node_modules/ramda/src/median.js"],"names":["_curry1","require","mean","module","exports","median","list","len","length","NaN","width","idx","Array","prototype","slice","call","sort","a","b"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiBJ,OAAO,CAAC,SAASK,MAAT,CAAgBC,IAAhB,EAAsB;AAC7C,MAAIC,GAAG,GAAGD,IAAI,CAACE,MAAf;;AACA,MAAID,GAAG,KAAK,CAAZ,EAAe;AACb,WAAOE,GAAP;AACD;;AACD,MAAIC,KAAK,GAAG,IAAIH,GAAG,GAAG,CAAtB;AACA,MAAII,GAAG,GAAG,CAACJ,GAAG,GAAGG,KAAP,IAAgB,CAA1B;AACA,SAAOR,IAAI,CAACU,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiC,CAAjC,EAAoCU,IAApC,CAAyC,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAClE,WAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,GAFW,EAETJ,KAFS,CAEHH,GAFG,EAEEA,GAAG,GAAGD,KAFR,CAAD,CAAX;AAGD,CAVuB,CAAxB","sourcesContent":["var _curry1 = require('./internal/_curry1');\nvar mean = require('./mean');\n\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nmodule.exports = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n"]},"metadata":{},"sourceType":"script"}